/* Root class with variables */
.root {
  /* Original speed */
  --transition--containerIn: 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  --transition--containerOut: 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  --transition--componentsIn: 60ms linear 60ms;
  --transition--componentsOut: 67ms linear 50ms;
  --transition--scrimIn: 90ms linear 0ms;
  --transition--scrimOut: 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  /* Slowed down speed, for testing */
  /* --transition--containerIn: 3000ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  --transition--containerOut: 2500ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
  --transition--componentsIn: 600ms linear 600ms;
  --transition--componentsOut: 670ms linear 500ms;
  --transition--scrimIn: 900ms linear 0ms;
  --transition--scrimOut: 2500ms cubic-bezier(0.4, 0, 0.2, 1) 0ms; */
}

/* OUTER TRANSFORMING CONTAINER */

/*
Default collapsed state
Top, bottom, left, right, width, height are always the same as the collapsed
component.
*/
.transforming-container--collapsed {
  top: var(--collapsedTop);
  bottom: var(--collapsedBottom);
  left: var(--collapsedLeft);
  right: var(--collapsedRight);
  width: var(--collapsedWidth);
  height: var(--collapsedHeight);
}

/*
Default expanded state
This class can be replaced with any other class defining the same properties.
*/
.transforming-container--expanded {
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%;
  z-index: 1200;
  position: fixed;
}

/* State while expanding, before collapsing */
.transforming-container--enter-active,
.transforming-container--exit {
  overflow: hidden;
}

/* State during collapsing + exit transition */
div.transforming-container--exit-active {
  position: fixed;
  overflow: hidden;

  top: var(--collapsedTop);
  bottom: var(--collapsedBottom);
  left: var(--collapsedLeft);
  right: var(--collapsedRight);
  width: var(--collapsedWidth);
  height: var(--collapsedHeight);
}

/* Enter transition */
.transforming-container--transition {
  transition: all var(--transition--containerIn);
}

/* INNER CONTAINER */

.root .transforming-container .inner-container--collapsed--enter,
.root .transforming-container .inner-container--expanded--enter {
  opacity: 0;
}

.root .transforming-container .inner-container--collapsed--enter-active,
.root .transforming-container .inner-container--expanded--enter-active {
  opacity: 1;
}

.root .transforming-container .inner-container--collapsed--exit,
.root .transforming-container .inner-container--expanded--exit {
  opacity: 1;
}

.root .transforming-container .inner-container--collapsed--exit-active,
.root .transforming-container .inner-container--expanded--exit-active {
  opacity: 0;
}

.root .transforming-container .inner-container--expanded--enter-active,
.root .transforming-container .inner-container--expanded--exit-active {
  position: relative;
  bottom: var(--collapsedHeight);
}

/* Enter transition - collapsed component exit, expanded component enter */
.root .transforming-container .inner-container--collapsed--exit-active,
.root .transforming-container .inner-container--expanded--enter-active {
  transition: opacity var(--transition--componentsIn),
    top var(--transition--componentsIn);
}

/* Exit transition - collapsed component enter, expanded component exit */
.root .transforming-container .inner-container--collapsed--enter-active,
.root .transforming-container .inner-container--expanded--exit-active {
  transition: opacity var(--transition--componentsOut),
    top var(--transition--componentsOut);
}

/* DEFAULT SCRIM */

/* Default scrim styles */
.scrim {
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%;
  position: fixed;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1199;

  pointer-events: none;
}

/* Scrim transition classes */
.scrim--enter {
  opacity: 0;
}
.scrim--enter-active {
  opacity: 1;
  transition: opacity var(--transition--scrimIn);
}
.scrim--exit {
  opacity: 1;
}
.scrim--exit-active {
  opacity: 0;
  transition: opacity var(--transition--scrimOut);
}
